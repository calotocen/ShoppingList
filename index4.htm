<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            height: 100dvh;
        }

        .btn-icon {
            --bs-btn-padding-x: 0rem;
            --bs-btn-padding-y: 0rem;
            --bs-btn-border-width: 0px;
        }

        .text-main {
            color: #31bc92;
        }

        .bg-main {
            background-color: #31bc92;
        }

        .bg-main-subtle {
            background-color: #ffffff;
        }

        [disabled] {
            filter: grayscale(100%);
        }

        .circle-checkbox {
            display: flex;
            position: relative;
            align-items: center;
            column-gap: 0.5rem;
        }

        .circle-checkbox::before {
            /* bi */
            display: inline-block;
            font-family: bootstrap-icons !important;
            font-style: normal;
            font-weight: normal !important;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            vertical-align: -.125em;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;

            /* py-1 */
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;

            /* fs-4 */
            font-size: calc(1.275rem + 0.3vw);

            color: black;
        }

        .circle-checkbox:has(input[type="checkbox"]:not(:checked))::before {
            /* bi-circle */
            content: "\f28a";
        }

        .circle-checkbox:has(input[type="checkbox"]:checked)::before {
            /* bi-check-circle-fill */
            content: "\f26a";

            /* text-main */
            color: #31bc92;
        }

        .circle-checkbox:has(input[type="checkbox"]:indeterminate)::before {
            /* bi-dash-circle */
            content: "\f2e6";
        }

        .circle-checkbox:has(input[type="checkbox"]:focus)::before {
            outline: gray dotted;
        }

        .circle-checkbox:has(input[type="checkbox"]:disabled)::before {
            color: gray;
        }

        .circle-checkbox>input[type="checkbox"] {
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 0;
            opacity: 0;
        }

        .view {
            overflow: auto;
            scrollbar-gutter: stable;
        }

        .view:has(~ .modal-view:not([style*="display: none;"])) {
            pointer-events: none;
            user-select: none;
            overflow: hidden;
            filter: saturate(30%) contrast(60%) blur(1px);
        }

        .offcanvas-width-50 {
            /* the default value of --bs-offcanvas-width is 400px.
             * it is defined as $offcanvas-horizontal-width in Saas.
             */
            --bs-offcanvas-width: min(400px, 50vw);
        }
    </style>
</head>

<body>
    <div data-id="rootContainer">
    </div>
    <div class="modal" tabindex="-1" id="itemAdditionView">
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const RuntimeConfiguration = {
            debugMode: true,
        };

        class StringsInEnglish {
            static newItemSetName = 'New set';
            static loadPresetLabel = 'Load the preset'
        }
        class StringsInJapanese {
            static newItemSetName = '';
            static loadPresetLabel = 'プリセットのロード'
        }
        let L10n = StringsInJapanese;

        class Entity {
            constructor(model, parameter = {}) {
                this.model = model;
                this.type = this.constructor.name;
                this.id = parameter.id ?? `${this.type}_${window.crypto.randomUUID()}`;
            }

            serialize() {
                return {
                    type: this.type,
                    id: this.id,
                };
            }
            deserialize({ type, id }) {
                this.type = type;
                this.id = id;
            }
        }
        class DataArray extends Array {
            constructor(model, values = []) {
                super();
                this.model = model;
                this.push(...values);
            }

            get(id) {
                return this.find(value => value.id == id);
            }

            serialize() {
                return this.map(value => value.serialize());
            }
            deserialize(values) {
                this.empty();
                this.push(...values.map(value => new (new Function(`return ${value.type}`)())(this.model).deserialize(value)));
                return this;
            }
        }
        class DataReferenceArray extends Array {
            constructor(model, values = []) {
                super();
                this.model = model;
                this.push(...values);
            }

            serialize() {
                return this.map(i => i.id);
            }
            deserialize(ids) {
                this.empty();
                this.push(...ids.map(id => this.model.get(id)));
                return this;
            }
        }

        class Item extends Entity {
            constructor(model, parameter = {}) {
                super(model, parameter);
                this.name = parameter.name ?? '';
                this.amount = parameter.amount ?? 0;
                this.unit = parameter.unit ?? '';
            }

            get belongingTo() {
                return this.model.itemSets.find(itemSet => itemSet.items.find(item => item.id == this.id));
            }

            serialize() {
                return Object.assign({
                    ...super.serialize(),
                    ...{
                        name: this.name,
                        amount: this.amount,
                        unit: this.unit,
                    },
                });
            }
            deserialize({ type, id, name, amount, unit }) {
                super.deserialize({ type: type, id: id });
                this.name = name;
                this.amount = amount;
                this.unit = unit;
                return this;
            }

            toString() {
                return `${this.name} ... ${this.amount} ${this.unit}`;
            }
        }
        class ItemSet extends Entity {
            constructor(model, parameters = {}) {
                super(model, parameters);
                this.name = parameters.name ?? '';
                this.items = new DataReferenceArray(this.model, parameters.items ?? []);
            }

            toString() {
                return this.name;
            }

            serialize() {
                return Object.assign({
                    ...super.serialize(),
                    ...{
                        name: this.name,
                        items: this.items.serialize(),
                    },
                });
            }
            deserialize({ type, id, name = '', items = [] }) {
                super.deserialize({ type: type, id: id });
                this.name = name;
                this.items = new DataReferenceArray(this.model).deserialize(items);
                return this;
            }
        }
        class Model {
            constructor() {
                this.items = new DataArray(this);
                this.itemSets = new DataArray(this);
                this.selectedItemSets = new DataReferenceArray(this);
                this.activeItems = new DataReferenceArray(this);
                this.selectedActiveItems = new DataReferenceArray(this);
                this.stagedItemSet = undefined;
                this.stagedItems = undefined;
            }

            get(id) {
                return this.items.find(item => item.id == id)
                    ?? this.itemSets.find(itemSet => itemSet.id == id);
            }

            empty() {
                this.items.empty();
                this.itemSets.empty();
                this.selectedItemSets.empty();
                this.activeItems.empty();
                this.selectedActiveItems.empty();
                this.stagedItemSet = undefined;
                this.stagedItems = undefined;
            }

            serialize() {
                return {
                    items: this.items.serialize(),
                    itemSets: this.itemSets.serialize(),
                    selectedItemSets: this.selectedItemSets.serialize(),
                    activeItems: this.activeItems.serialize(),
                    selectedActiveItems: this.selectedActiveItems.serialize(),
                    stagedItemSet: this.stagedItemSet?.serialize(),
                    stagedItems: this.stagedItems?.serialize(),
                }
            }
            deserialize({ itemSets = [], items = [], selectedItems = [], selectedItemSets = [], activeItems = [], selectedActiveItems = [], stagedItemSet, stagedItems }) {
                this.items.deserialize(items);
                this.itemSets.deserialize(itemSets);
                this.selectedItemSets.deserialize(selectedItemSets);
                this.activeItems.deserialize(activeItems);
                this.selectedActiveItems.deserialize(selectedActiveItems);
                this.stagedItemSet = (stagedItemSet !== undefined) ? new ItemSet(this).deserialize(stagedItemSet) : undefined;
                this.stagedItems = (stagedItems !== undefined) ? new DataArray(this).deserialize(stagedItems) : undefined;
            }
        }

        class NonVolatileModelStore {
            constructor(model) {
                this.model = model;
            }

            save() {
                localStorage['model'] = JSON.stringify(this.model.serialize());
            }
            load() {
                this.model.deserialize(JSON.parse(localStorage['model']));
            }
        }

        class IconButton {
            static create({ icon = undefined, size = 'fs-1', padding = 'normal', color = '', state = 0, overlapped = false, buttons = [] }) {
                return $('<button>')
                    .addClass('btn')
                    .addClass(overlapped ? 'position-relative' : '')
                    .css({ '--bs-btn-border-width': '0px' })
                    .css({
                        normal: {},
                        fit: {
                            '--bs-btn-padding-x': '0px',
                            '--bs-btn-padding-y': '0px',
                        },
                    }[padding])
                    .append((icon !== undefined ? [icon] : buttons).map((parameter, i) => $('<i>')
                        .addClass(typeof parameter === 'string'
                            ? `bi ${parameter} ${size} ${color}`
                            : `bi ${parameter.icon} ${parameter.size ?? size} ${parameter.color ?? color}`)
                        .addClass(overlapped ? 'position-absolute top-0 start-0' : '')
                        .toggle(state == i)))
                    .data({ state: state });
            }

            static toggle($button, state) {
                $button.children().hide();
                $button.children().eq(Number(state)).show();
                $button.data({ 'state': state });
            }
        }
        class AbstractView {
            #controller

            constructor($element = $('<div>').addClass('bg-main-subtle view')) {
                this.$element = $element;
            }

            get controller() {
                return this.#controller;
            }
            set controller(controller) {
                this.#controller = controller;
            }

            get model() {
                return this.#controller.model;
            }
            get view() {
                return this.#controller.view;
            }

            get dependedModels() {
                return [];
            }

            show(option = undefined) {
                const animations = {
                    slideUp: () => this.$element[0].animate([
                        { transform: "translateY(50vh)" },
                        { transform: "translateY(0)" },
                    ], {
                        duration: 200,
                        easing: 'ease-in',
                    }),
                };
                (animations[option] ?? (() => { }))();
                this.$element.show();
            }
            hide() {
                this.$element.hide();
            }
            isDisplayed() {
                return this.$element.css('display') != 'none';
            }

            update() {
            }
        }
        class ThreePanelView extends AbstractView {
            constructor($element = undefined) {
                super($element);

                const myself = this;
                this.$element
                    // d-flex needs to wrap by a div because hide() does not work for d-flex.
                    .addClass('container-fluid p-0 h-100')
                    .append($('<div>')
                        .addClass('d-flex flex-column h-100')
                        .append(
                            this.$headerContainer = $('<div>')
                                .addClass(`container-fluid p-0 sticky-top`)
                                .append(this.$headerPanel = $('<div>')
                                    .addClass('d-flex justify-content-around bg-main-subtle')),
                            this.$bodyContainer = $('<div>')
                                .addClass('container-fluid p-0 flex-fill')
                                .append(this.$bodyPanel = $('<div>')
                                    .addClass('container-fluid px-0')),
                            this.$footerContainer = $('<div>')
                                // d-flex needs to wrap by a div because hide() does not work for d-flex.
                                .addClass('container-fluid p-0 sticky-bottom')
                                .append(this.$footerPanel = $('<div>')
                                    .addClass('d-flex justify-content-around bg-main-subtle'))));

                this.$element.scroll(function () {
                    if (!myself.isDisplayed()) return;

                    // It is necessary to check whether this.scrollTop is outside the area because scroll can be bounced in iOS-Safari.
                    if (this.scrollTop < 0 || this.scrollHeight - this.clientHeight < this.scrollTop) {
                        return;
                    }

                    const previousScrollTop = $(this).data('previousScrollTop') ?? 0;
                    if (this.scrollTop === previousScrollTop) {
                        return;
                    }
                    $(this).data({ previousScrollTop: this.scrollTop });

                    const scrollDirection = previousScrollTop >= this.scrollTop ? 'up' : 'down';
                    if (scrollDirection === $(this).data('previousScrollDirection')) {
                        return;
                    }

                    const scrolledToTop = this.scrollTop <= 0;
                    const scrolledToBottom = this.scrollTop >= this.scrollHeight - this.clientHeight;
                    if (scrollDirection === 'up') {
                        myself.visualizeHeader();
                        myself.visualizeFooter();
                    } else {
                        myself.invisualizeHeader();
                        myself.invisualizeFooter();
                    }
                    $(this).data({ previousScrollDirection: scrollDirection });
                });
            }

            #toggleElement($element, displayed = undefined, options = {}) {
                const currentState = $element.data('displayed') ?? $element.css('visibility') == 'visible';
                displayed ??= !currentState;
                if (currentState == displayed) return;

                $element.fadeTo(options.duration ?? 0, Number(displayed), function () {
                    $element.css({ visibility: displayed ? 'visible' : 'hidden' });
                });

                // The guard is necessary because jQuery#fadeTo is run as many times as it is called.
                // I decided that the 'displayed' state is managed with inner data
                // because 'visibility' style takes time to reflect the state depending on the fade duration.
                $element.data({ displayed: displayed });
            }

            visualizeHeader() {
                this.$headerContainer.stop(true, true);
                this.$headerContainer.visualize(...$.animation('untransparentize'));
            }
            invisualizeHeader() {
                this.$headerContainer.stop(true, true);
                this.$headerContainer.invisualize(...$.animation('fadeOut'));
            }
            visualizeFooter() {
                this.$footerContainer.stop(true, true);
                this.$footerContainer.visualize(...$.animation('untransparentize'));
            }
            invisualizeFooter() {
                this.$footerContainer.stop(true, true);
                this.$footerContainer.invisualize(...$.animation('transparentize'));
            }
        }
        class ShoppingListView extends ThreePanelView {
            constructor() {
                super();

                const myself = this;
                const $leftMenuBar = $('<div>')
                    .addClass('offcanvas offcanvas-start offcanvas-width-50')
                    .attr({ tabindex: -1 })
                    .append(
                        $('<div>')
                            .addClass('offcanvas-header p-0')
                            .append($('<button>')
                                .attr({ type: 'button' })
                                .addClass('btn border-0 fs-2 text-secondary bi bi-arrow-left-circle')
                                .click(function () {
                                    myself.$showLeftMenuBarButton.data('bsOffcanvas').hide();
                                })),
                        $('<div>')
                            .addClass('offcanvas-body p-0')
                            .append($('<div>')
                                .addClass('list-group list-group-flush')
                                .append(
                                    $('<button>')
                                        .addClass('list-group-item list-group-item-action')
                                        .attr({ type: 'button' })
                                        .text(L10n.loadPresetLabel)
                                        .click(function () {
                                            myself.$showLeftMenuBarButton.data('bsOffcanvas').hide();
                                            myself.controller.run('loadPresetData');
                                        }))));
                this.$showLeftMenuBarButton = $('<button>')
                    .attr({ type: 'button' })
                    .addClass('btn border-0 fs-1 text-secondary bi bi-list')
                    .click(function () {
                        // bootstrap#offcanvas instance can be created under the following conditions:
                        //     - The specified element exists in DOM.
                        //     - The offcanvas does not open.
                        //       If it is created while opening its offcanvas, its internal state becomes incosistent
                        //       and the offcanvas cannot be operated by the instance.
                        if (myself.$showLeftMenuBarButton.data('bsOffcanvas') === undefined) {
                            myself.$showLeftMenuBarButton.data({ 'bsOffcanvas': new bootstrap.Offcanvas($leftMenuBar) });
                        }
                        myself.$showLeftMenuBarButton.data('bsOffcanvas').show();
                    });
                this.$headerPanel
                    .append(
                        $('<div>')
                            .addClass('col text-left')
                            .append(
                                this.$showLeftMenuBarButton,
                                $leftMenuBar),
                        $('<div>')
                            .addClass('col text-center')
                            .append(IconButton.create({ icon: 'bi-bag', color: 'text-main' })),
                        $('<div>')
                            .addClass('col text-right'));
                this.$showItemSetSelectionViewButton = IconButton.create({ icon: 'bi-journals', color: 'text-main' })
                    .click(function () {
                        myself.view.switchOver(myself.view.itemSetSelectionView);
                    });
                this.$copyButton = IconButton.create({ buttons: ['bi-clipboard', 'bi-clipboard-check-fill'], color: 'text-main', overlapped: true })
                    .click(function () {
                        myself.controller.writeCurrentShoppingListToClipboard();
                        $(this).children(':last').show().fadeOut(1000);
                    });
                this.$footerPanel.append(
                    this.$showItemSetSelectionViewButton,
                    $('<div>'),
                    $('<div>'),
                    $('<div>'),
                    this.$copyButton);
            }

            update() {
                super.update();

                const myself = this;
                this.$bodyPanel.empty();
                this.$bodyPanel.append(
                    Object.values(Object.groupBy(this.model.activeItems, item => `${item.name}@${item.unit}`)).map(groupedItems => {
                        const selectedGroupedItems = groupedItems.filter(item => this.model.selectedActiveItems.includes(item));
                        const name = groupedItems[0].name;
                        const amount = groupedItems.reduce((sum, item) => sum + item.amount, 0);
                        const unit = groupedItems[0].unit;
                        return $('<div>')
                            .addClass('containter-fluid px-3 d-flex align-items-center')
                            .append($('<label>')
                                .addClass('circle-checkbox')
                                .append(
                                    $('<input>')
                                        .attr({ type: 'checkbox' })
                                        .prop({
                                            checked: groupedItems.length === selectedGroupedItems.length,
                                            indeterminate: 0 < selectedGroupedItems.length && selectedGroupedItems.length < groupedItems.length,
                                        })
                                        .change(function () {
                                            myself.controller.run('changeActiveItemSelectionState', groupedItems, $(this).prop('checked'));
                                        })),
                                $('<div>')
                                    .addClass('ps-3')
                                    .text(`${name} ... ${amount} ${unit}`)
                                    .click(function () {
                                        $(this).prev().click();
                                    }))
                    }));
            }

            get dependedModels() {
                return [this.model.activeItems, this.model.selectedActiveItems];
            }
        }
        class ItemSetSelectionView extends ThreePanelView {
            constructor() {
                super();

                const myself = this;
                this.$backButton = $('<button>')
                    .attr({ type: 'button' })
                    .addClass('btn border-0 fs-2 text-secondary bi bi-arrow-left-circle')
                    .click(function () {
                        myself.view.switchOver(myself.view.shoppingListView);
                    })
                this.$headerPanel.append(
                    $('<div>')
                        .addClass('col text-left')
                        .append(this.$backButton),
                    $('<div>')
                        .addClass('col text-center')
                        .append($('<i>').addClass('fs-1 bi bi-journals text-main')),
                    $('<div>')
                        .addClass('col text-right'));
                this.$itemsContainer = $('<div>').addClass('containter-fluid px-3');
                this.$bodyPanel.append(this.$itemsContainer);
                this.$addButton = IconButton.create({ icon: 'bi-journal-plus', color: 'text-main' })
                    .click(function () {
                        myself.controller.run('stageItemSet', new ItemSet());
                        myself.view.switchOver(myself.view.itemSetAdditionView);
                    });
                this.$changeModeButton = IconButton.create({ buttons: ['bi-pencil-square', 'bi-list-ul'], color: 'text-main' })
                    .click(function () {
                        IconButton.toggle($(this), !$(this).data('state'));
                        myself.update();
                    });
                this.$footerPanel.append(
                    this.$addButton,
                    $('<div>'),
                    $('<div>'),
                    $('<div>'),
                    this.$changeModeButton,
                );
            }

            update() {
                super.update();

                const myself = this;
                this.$itemsContainer.empty();
                this.$itemsContainer.append(
                    this.model.itemSets.map(itemSet =>
                        $('<div>')
                            .addClass('row')
                            .append(
                                $('<div>')
                                    .addClass('col-auto d-flex align-items-center')
                                    .append(
                                        $('<label>')
                                            .addClass('circle-checkbox')
                                            .append(
                                                $('<input>')
                                                    .attr({ type: 'checkbox' })
                                                    .prop({ checked: this.model.selectedItemSets.includes(itemSet) })
                                                    .change(function () {
                                                        myself.controller.run('changeItemSetSelectionState', itemSet, $(this).prop('checked'));
                                                    })),
                                        $('<div>')
                                            .addClass('col ps-0 d-flex align-items-center')
                                            .text(itemSet.toString())
                                            .click(function () {
                                                $(this).prev().children(':first').click();
                                            }),
                                        $('<div>')
                                            .addClass('col-auto p-0 d-flex align-items-center')
                                            .append($('<button>')
                                                .attr({ type: 'button' })
                                                .addClass('btn border-0 px-3 py-0 rounded-0 fs-4 text-light bg-main bi bi-pencil-fill')
                                                .toggle(this.$changeModeButton.data('state'))
                                                .click(function () {
                                                    myself.controller.run('stageItemSet', itemSet);
                                                    myself.view.switchOver(myself.view.itemSetAdditionView);
                                                })),
                                        $('<div>')
                                            .addClass('col-auto p-0 d-flex align-items-center')
                                            .append($('<button>')
                                                .attr({ type: 'button' })
                                                .addClass('btn border-0 px-3 py-0 rounded-0 fs-4 text-light bg-danger bi bi-trash3')
                                                .toggle(this.$changeModeButton.data('state'))
                                                .click(function () {
                                                    myself.controller.run('removeItemSet', itemSet);
                                                }))))));
            }

            get dependedModels() {
                return [this.model.itemSets, this.model.selectedItemSets];
            }
        }
        class ItemSetAdditionView extends ThreePanelView {
            constructor() {
                super();

                const myself = this;
                this.$headerPanel.append($('<div>')
                    .addClass('mt-3')
                    .append(
                        $('<div>')
                            .addClass('col text-start')
                            .append(this.$backButton = IconButton.create({ icon: 'bi-x-circle', size: 'fs-2', color: 'text-secondary' })
                                .click(function () {
                                    myself.controller.run('unstageItemSet');
                                    myself.view.switchOver(myself.view.itemSetSelectionView);
                                })),
                        $('<div>')
                            .addClass('col text-end')
                            .append(this.$commitButton = IconButton.create({
                                buttons: [
                                    { icon: 'bi-keyboard', size: 'fs-2', color: 'text-secondary' },
                                    { icon: 'bi-check-lg', size: 'fs-2', color: 'text-main' },
                                ]
                            })
                                .click(function () {
                                    if ($(this).data('state')) {
                                        myself.controller.run('commitItemSet');
                                        myself.view.switchOver(myself.view.itemSetSelectionView);
                                    } else {
                                        myself.$nameInput.focus();
                                    }
                                }))));
                this.$bodyPanel
                    .append(
                        $('<div>')
                            .addClass('container-fluid')
                            .append(
                                $('<div>')
                                    .addClass('row mt-1')
                                    .append(
                                        $('<div>').addClass('col-auto'),
                                        $('<div>')
                                            .addClass('col')
                                            .append(this.$nameInput = $('<input>')
                                                .addClass('form-control border-0')
                                                .css({ 'font-size': '1.5rem' })
                                                .attr({ type: 'text' })
                                                .change(function () {
                                                    myself.model.stagedItemSet.name = $(this).val();
                                                    myself.update();
                                                }))),
                                $('<div>')
                                    .addClass('row')
                                    .append(
                                        $('<div>')
                                            .addClass('col-auto')
                                            .append($('<i>').addClass('fs-4 bi bi-basket3 text-main')),
                                        $('<div>')
                                            .addClass('col')
                                            .append(this.$itemsContainer = $('<div>'))),
                                $('<div>')
                                    .addClass('row')
                                    .append(
                                        $('<div>').addClass('col-auto'),
                                        $('<div>')
                                            .addClass('col')
                                            .append(IconButton.create({ icon: 'bi-plus-circle', size: 'fs-3', padding: 'fit' })
                                                .addClass('ps-3 pt-1')
                                                .click(function () {
                                                    myself.controller.run('addItemSet', myself.$nameInput.val(), myself.model.stagedItems);
                                                })))));
            }

            show() {
                super.show('slideUp');
            }

            update() {
                super.update();

                const myself = this;
                this.$nameInput.val(this.model.stagedItemSet ? this.model.stagedItemSet.name : '');
                this.$itemsContainer
                    .empty()
                    .append((this.model.stagedItems ?? []).map(item =>
                        $('<div>')
                            .addClass('row')
                            .append(
                                $('<div>')
                                    .addClass('col ps-0 d-flex align-items-center')
                                    .text(item.toString())
                                    .click(function () {
                                        $(this).prev().click();
                                    }),
                                $('<div>')
                                    .addClass('col-auto p-0 d-flex align-items-center')
                                    .append(
                                        $('<button>')
                                            .attr({ type: 'button' })
                                            .addClass('btn border-0 px-3 py-0 rounded-0 fs-4 text-light bg-main bi bi-pencil-fill')
                                            .click(function () {
                                                myself.view.switchOver(myself.view.itemAdditionView);
                                            })),
                                $('<div>')
                                    .addClass('col-auto p-0 d-flex align-items-center')
                                    .append($('<button>')
                                        .attr({ type: 'button' })
                                        .addClass('btn border-0 px-3 py-0 rounded-0 fs-4 text-light bg-danger bi bi-trash3')

                                        .click(function () {
                                        })))));
                IconButton.toggle(this.$commitButton, (this.model?.stagedItemSet?.name ?? '') != '');
            }

            get dependedModels() {
                return [this.model.stagedItems];
            }
        }
        class ItemAdditionView extends AbstractView {
            constructor() {
                super();

                const myself = this;
                this.modalId = '#itemAdditionView';
                this.$nameInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$amountInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$unitInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$element.append(
                    this.$nameInput,
                    this.$amountInput,
                    this.$unitInput,
                    $('<button>')
                        .addClass('btn')
                        .attr({ type: 'button' })
                        .text('追加3')
                        .click(function () {
                            myself.controller.run('stageItem', {
                                name: myself.$nameInput.val(),
                                amount: myself.$amountInput.val(),
                                unit: myself.$unitInput.val(),
                            });
                        }));
                $(this.modalId).append(
                    $('<div>')
                        .addClass('modal-dialog modal-dialog-centered')
                        .append(
                            $('<div>')
                                .addClass('modal-content')
                                .append(
                                    $('<div>')
                                        .addClass('modal-body')
                                        .append(this.$element))));
            }

            show() {
                const modal = new bootstrap.Modal(this.modalId);
                modal.show();
            }
            hide() {
                const modal = new bootstrap.Modal(this.modalId);
                modal.hide();
            }
        }
        class AbstractViewPane extends AbstractView {
            constructor() {
                super($('[data-id="rootContainer"]'));
                this.shoppingListView = new ShoppingListView();
                this.itemSetSelectionView = new ItemSetSelectionView();
                this.itemSetAdditionView = new ItemSetAdditionView();
                this.itemAdditionView = new ItemAdditionView();
            }

            set controller(controller) {
                super.controller = controller;
                this.views.forEach(v => v.controller = controller);
            }

            get views() {
                return [
                    this.shoppingListView,
                    this.itemSetSelectionView,
                    this.itemAdditionView,
                    this.itemSetAdditionView,
                ];
            }

            switchOver(view) {
            }

            update(...updatedModels) {
                this.views
                    .filter(view => updatedModels.length == 0
                        || updatedModels.includes(this.model)
                        || view.dependedModels.some(model => updatedModels.includes(model)))
                    .forEach(view => view.update());
            }
        }
        class SingleViewPane extends AbstractViewPane {
            constructor() {
                super();

                this.$element
                    .addClass('container-fluid p-0 h-100')
                    .append(this.views
                        .filter(v => !(v instanceof ItemAdditionView))
                        .map(v => v.$element));
            }

            switchOver(view) {
                if (view instanceof ItemAdditionView) {
                    view.show();
                } else {
                    this.views.forEach(v => {
                        if (v === view) {
                            v.show();
                            v.update();
                        } else {
                            v.hide();
                        }
                    });
                }
            }
        }
        class FlexViewPane extends AbstractViewPane {
            constructor() {
                super();

                const $template = $('<div>').css({
                    width: '372px',
                    'min-width': '372px',
                    'max-width': '372px',
                    height: '625px',
                    'min-height': '625px',
                    'max-height': '625px',
                    border: '1px solid red',
                });
                this.$element
                    .addClass('container-fluid p-0')
                    .append(
                        $('<div>')
                            .addClass('container-fluid p-0 d-flex flex-wrap')
                            .append(this.views.map(v => $template.clone().append(v.$element))));
            }
        }

        class Controller {
            constructor(model, view) {
                this.model = model;
                this.view = view;
                this.modelStore = new NonVolatileModelStore(model);

                this.view.controller = this;
                this.view.switchOver(this.view.shoppingListView);
            }

            run(command, ...args) {
                const changedModels = Function('instance', `return instance.${command}`)(this).call(this, ...args);
                this.view.update(...changedModels);
                this.modelStore.save();
            }

            changeActiveItemSelectionState(items, selected) {
                items.forEach(item => selected ? this.model.selectedActiveItems.push(item) : this.model.selectedActiveItems.remove(item));
                return [this.model.selectedActiveItems];
            }

            changeItemSetSelectionState(itemSet, selected) {
                if (selected) {
                    this.model.selectedItemSets.push(itemSet);
                    this.model.activeItems.push(...itemSet.items);
                } else {
                    this.model.selectedItemSets.remove(itemSet);
                    this.model.activeItems.removeIf(item => itemSet.items.includes(item));
                    this.model.selectedActiveItems.removeIf(item => itemSet.items.includes(item));
                }
                return [this.model.activeItems, this.model.selectedActiveItems, this.model.selectedItemSets];
            }

            addItemSet(args) {
                this.model.itemSets.push(new ItemSet(this.model, args));
                return [this.model.itemSets];
            }
            removeItemSet(itemSet) {
                const changedModels = this.changeItemSetSelectionState(itemSet, false);
                this.model.items.removeIf(i => i.belongingTo == itemSet.id);
                this.model.itemSets.remove(itemSet);
                return changedModels.concat([this.model.itemSets]);
            }

            stageItemSet(itemSet) {
                this.model.stagedItemSet = Object.assign(new ItemSet(), itemSet);
                this.model.stagedItems = undefined;
                const changedModels = this.model.items
                    .filter(i => i.belongingTo === itemSet)
                    .map(i => this.stageItem(i));
                return changedModels.concat([this.model.stageItemSet, this.model.stagedItems]);
            }
            unstageItemSet() {
                this.model.stagedItemSet = undefined;
                this.model.stagedItems = undefined;
                return [this.model.stageItemSet, this.model.stagedItems];
            }
            commitItemSet() {
                let changedModels = [];
                const oldItemSet = this.model.itemSets.get(this.model.stagedItemSet.id);
                if (oldItemSet !== undefined) {
                    changedModels.concat(this.removeItemSet(oldItemSet));
                }

                this.model.stagedItems.forEach(i => this.model.items.push(i));
                this.model.itemSets.push(this.model.stagedItemSet);

                this.model.stagedItemSet = undefined;
                this.model.stagedItems = undefined;

                return changedModels.concat([this.model.stagedItems, this.model.itemSets, this.model.stagedItemSet, this.model.stagedItems]);
            }

            stageItem(item) {
                this.model.stagedItems ??= new DataArray(this.model);

                let serialized_item = item.serialize();
                serialized_item.belongingTo = this.model.stagedItemSet.id;
                this.model.stagedItems.push(new Item(this.model, serialized_item));
                return [this.model.stagedItems]
            }

            loadPresetData() {
                this.model.empty();
                loadPresetData(this.model);
                return [this.model];
            }

            writeCurrentShoppingListToClipboard() {
                const text = this.model.selectedItemSets.map(s => s.name).join('\n')
                    + '\n'
                    + Object.values(Object.groupBy(this.model.activeItems, item => `${item.name}@${item.unit}`)).map(groupedItems => {
                        const name = groupedItems[0].name;
                        const amount = groupedItems.reduce((sum, item) => sum + item.amount, 0);
                        const unit = groupedItems[0].unit;
                        return `${name} ... ${amount} ${unit}`
                    }).join('\n');
                navigator.clipboard.writeText(text);
            }

            saveModel() {
                this.modelStore.save();
            }
            loadModel() {
                this.modelStore.load();
                return [this.model];
            }
        }

        class BuiltinLibraryExtension {
            // Safari bundled in iOS 16 does not support Object.groupBy function yet.
            static defineObjectGroupBy(force = false) {
                if (Object.groupBy !== undefined && !force) return;

                Object.groupBy = function (items, callbackFn) {
                    let groupedItems = {};
                    items.forEach((item, index) => {
                        const key = callbackFn.call(this, item, index).toString();
                        if (!(key in groupedItems)) {
                            groupedItems[key] = [];
                        }
                        groupedItems[key].push(item);
                    });
                    return groupedItems;
                }
            }

            // Safari bundled in iOS 16 does not support window.crypto.randomUUID function yet,
            // or the browser only allows calling the function in https.
            static defineWindowCryptoRandomUUID(force = false) {
                if (window.crypto !== undefined && window.crypto.randomUUID !== undefined && !force) return;

                if (window.crypto === undefined) {
                    window.crypto = new Object();
                }

                // The following function will generate a UUID with variant 10x and version 4 defined in RFC-4122.
                window.crypto.randomUUID = function () {
                    let random_numbers = new Uint8Array(16);
                    window.crypto.getRandomValues(random_numbers);
                    random_numbers[6] = 0x40 | (random_numbers[6] & 0x0f);
                    random_numbers[8] = 0x80 | (random_numbers[8] & 0x3f);
                    random_numbers = Array.from(random_numbers);
                    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replaceAll('xx', s => random_numbers.shift().toString(16).padStart(2, '0'));
                }
            }

            // Safari bundled in iOS 16 does not support navigator.clipboard.writeText function yet.
            static defineNavigatorClipboardWriteText(force = false) {
                if (navigator.clipboard !== undefined && navigator.clipboard.writeText != undefined && !force) return;

                if (navigator.clipboard === undefined) {
                    navigator.clipboard = new Object();
                }

                navigator.clipboard.writeText = function (text) {
                    const $textarea = $('<textarea>').val(text);
                    const $element = $('<div>').append($textarea);
                    $('body').append($element);
                    const selection = window.getSelection();
                    selection.selectAllChildren($element[0]);   // Safari bundled iOS requires selection in this way.
                    document.execCommand('copy');
                    $element.remove();
                }
            }

            static defineArrayPrototypeEmpty(force = false) {
                if (Array.prototype.empty !== undefined && !force) return;

                Array.prototype.empty = function () {
                    // splice() will call constructor().
                    // constructor() of models that inherit Array class calls this method via deserialize().
                    // This is why this guard is required.
                    // It prevents infinite loop when models that inherit Array class are created.
                    if (this.length == 0) return;
                    this.splice(0);
                }
            }

            static defineArrayPrototypeRemove(force = false) {
                if (Array.prototype.remove !== undefined && !force) return;

                Array.prototype.remove = function (value) {
                    let lastRemovedElement = undefined;
                    for (; ;) {
                        const i = this.indexOf(value);
                        if (i == -1) break;

                        lastRemovedElement = this[i];
                        this.splice(i, 1);
                    }
                    return lastRemovedElement;
                }
            }

            static defineArrayPrototypeRemoveIf(force = false) {
                if (Array.prototype.removeIf !== undefined && !force) return;

                Array.prototype.removeIf = function (callbackFn, thisArg) {
                    let lastRemovedElement = undefined;
                    for (; ;) {
                        const i = this.findIndex(callbackFn, thisArg);
                        if (i == -1) break;

                        lastRemovedElement = this[i];
                        this.splice(i, 1);
                    }
                    return lastRemovedElement;
                }
            }
        }

        class JQueryExtension {
            static defineVisualize(force = false) {
                if ($.fn.visualize !== undefined && !force) return;

                $.fn.extend({
                    visualize: function (properties = undefined, options = {}) {
                        $(this).animate(properties ?? {}, {
                            ...(properties === undefined ? { duration: 0 } : {}),
                            ...options,
                            ...{
                                start: function () {
                                    options.start?.apply(this);
                                    $(this).css({ visibility: '' });
                                },
                            }
                        });
                    }
                });
            }

            static defineInvisualize(force = false) {
                if ($.fn.invisualize !== undefined && !force) return;

                $.fn.extend({
                    invisualize: function (properties = undefined, options = {}) {
                        $(this).animate(properties ?? {}, {
                            ...(properties === undefined ? { duration: 0 } : {}),
                            ...options,
                            ...{
                                complete: function () {
                                    $(this).css({ visibility: 'hidden' });
                                    options.complete?.apply(this);
                                },
                            }
                        });
                    }
                });
            }

            static defineAnimation(force = false) {
                if ($.animation !== undefined && !force) return;

                $.extend({
                    animation: function (name) {
                        return {
                            untransparentize: [{ opacity: 1 }, { duration: 0 }],
                            transparentize: [{ opacity: 0 }, { duration: 0 }],
                            fadein: [{ opacity: 1 }, { duration: 500 }],
                            fadeout: [{ opacity: 0 }, { duration: 500 }],
                        }[name.toLowerCase()];
                    }
                });
            }
        }

        class Platform {
            static isSmartPhone() {
                return navigator.userAgent.match(/iPhone|Android.+Mobile/);
            }

            static isIOS() {
                return navigator.userAgent.match(/iPhone|iPad/);
            }
        }

        $(function () {
            BuiltinLibraryExtension.defineObjectGroupBy();
            BuiltinLibraryExtension.defineWindowCryptoRandomUUID();
            BuiltinLibraryExtension.defineNavigatorClipboardWriteText();
            BuiltinLibraryExtension.defineArrayPrototypeEmpty();
            BuiltinLibraryExtension.defineArrayPrototypeRemove();
            BuiltinLibraryExtension.defineArrayPrototypeRemoveIf();
            JQueryExtension.defineVisualize();
            JQueryExtension.defineInvisualize();
            JQueryExtension.defineAnimation();

            const model = new Model();
            const view = new SingleViewPane();
            const controller = new Controller(model, view);
            controller.run('loadModel');
        })

        function loadPresetData(model) {
            const presetData = {
                インドカレー: [
                    ['鶏もも肉', 300, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['ニンジン', 1, '本'],
                    ['トマト缶', 1, '缶'],
                ],
                ベーコンとほうれん草: [
                    ['平ベーコン', 1, 'パック'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['厚あげ', 1, '個'],
                    ['かつお節', 1, '袋'],
                ],
                鮭しめじ: [
                    ['鮭', 2, '切れ'],
                    ['しめじ', 2, '株'],
                ],
                プルコギ: [
                    ['豚こま', 250, 'g'],
                    ['ニンジン', 1, '本'],
                    ['ピーマン', 4, '個'],
                ],
                豚キャベツ: [
                    ['豚こま', 250, 'g'],
                    ['キャベツ', 0.25, '個'],
                ],
                豚生姜焼き: [
                    ['豚こま', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['刻み青ねぎ', 1, 'パック'],
                ],
                鶏ねぎ: [
                    ['鶏もも肉', 300, 'g'],
                    ['白ねぎ', 1, '本'],
                ],
                麻婆: [
                    ['豚挽肉', 300, 'g'],
                    ['しいたけ', 1, 'パック'],
                    ['白ねぎ', 1, '本'],
                ],
                親子丼: [
                    ['鶏もも肉', 300, 'g'],
                    ['エリンギ', 1, 'パック'],
                    ['玉ねぎ', 1, '個'],
                ],
                ナポリタン: [
                    ['ソーセージ', 1, '袋'],
                    ['エリンギ', 1, 'パック'],
                    ['ピーマン', 4, '個'],
                    ['グラタンの素', 1, '箱'],
                ],
                カルボナーラ: [
                    ['角ベーコン', 1, 'パック'],
                    ['エリンギ', 1, 'パック'],
                    ['カルボナーラソース', 1, 'パック'],
                ],
                ラザニア: [
                    ['合挽肉', 300, 'g'],
                    ['ラザニアの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                ],
                オムライス: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['コーン缶', 1, '缶'],
                    ['卵', 3, '個'],
                    ['バター', 2, '個'],
                ],
                ドリア: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['刻みチーズ', 1, '袋'],
                    ['卵', 2, '個'],
                ],
                三食丼: [
                    ['鶏もも挽肉', 250, 'g'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['卵', 3, '個'],
                ],
                焼きそば: [
                    ['豚こま', 250, 'g'],
                    ['焼きそば麺', 1.5, '袋'],
                    ['カット野菜', 1, '袋'],
                ],
                グラタン: [
                    ['鶏もも肉', 300, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['グラタンの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                    ['バター', 2, '個'],
                ],
                うどん: [
                    ['冷凍うどん', 1, 'パック'],
                    ['きつねあげ', 1, 'パック'],
                    ['乾燥わかめ', 4, 'つまみ'],
                    ['卵', 2, '個'],
                    ['天ぷら', 3, '個'],
                    ['メンチカツ', 2, '個'],
                ],
                ミートパスタ: [
                    ['ミートソース', 1, '袋'],
                    ['合挽肉', 300, 'g'],
                    ['エリンギ', 1, 'パック'],
                ],
                ロコモコ丼: [
                    ['合挽肉', 300, 'g'],
                    ['エリンギ', 1, 'パック'],
                    ['卵', 2, '個'],
                    ['千切りキャベツ', 1, '袋'],
                ],
                豚キムチ: [
                    ['豚こま', 300, 'g'],
                    ['キムチ', 1, 'パック'],
                ],
            };

            model.itemSets.push(...Object.keys(presetData).map(name => {
                const items = presetData[name].flatMap(parameter => new Item(
                    model,
                    { name: parameter[0], amount: parameter[1], unit: parameter[2] }
                ));
                model.items.push(...items);
                return new ItemSet(model, { name: name, items: items });
            }));
        }
    </script>
</body>

</html>