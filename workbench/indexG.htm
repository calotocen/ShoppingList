<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .btn-icon {
            --bs-btn-padding-x: .2rem;
            --bs-btn-padding-y: .2rem;
            --bs-btn-border-width: 0px;
        }

        [disabled] {
            filter: grayscale(100%);
        }
    </style>
</head>

<body>
    <div class="p-0 container">
        <div class="row" style="background-color: #d8ffd8;">
            <div class="col d-flex justify-content-start align-items-center">
                <button type="button" class="btn btn-icon ms-2" data-bs-toggle="dropdown" aria-expanded="true">
                    <i class="fs-2 bi bi-list-ul"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#exampleModal">リストの編集</a></li>
                </ul>
            </div>
            <div class="col d-flex justify-content-center align-items-center">
                <span class="fw-bold">リスト</span>
            </div>
            <div class="col d-flex justify-content-end align-items-center"></div>
        </div>
        <div class="row">
            <div class="col">
                <div class="accordion">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button p-1" type="button" data-bs-toggle="collapse"
                                data-bs-target="[data-id='abc']">
                                Accordion Item #1
                            </button>
                        </h2>
                        <div data-id="abc" class="accordion-collapse collapse show">
                            <div class="accordion-body p-0" data-ui-name="body">
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button p-1" type="button" data-bs-toggle="collapse"
                                data-bs-target="[data-id='abcd']">
                                Accordion Item #2
                            </button>
                        </h2>
                        <div data-id="abcd" class="accordion-collapse collapse show">
                            <div class="accordion-body">
                                #2
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" id="exampleModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modal title</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Modal body text goes here.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>
        <!--
        <div id="itemListContainer" class="container-fluid">
            <div class="d-flex flex-row align-items-center">
                <button type="button" class="btn"
                    style="--bs-btn-padding-x: .2rem; margin-right: 0.5rem; display: none;">
                    <i class="fs-2 bi bi-dash-circle-fill text-danger"></i>
                </button>
                <button type="button" class="btn" style="--bs-btn-padding-x: .2rem;">
                    <i class="fs-2 bi bi-check-square-fill text-success"></i>
                </button>
                <input type="text" class="form-control border-0" placeholder="食材" style="margin-right: 6px;">
                <div class="input-group" style="min-width: 8rem; max-width: 8rem;">
                    <input type="number" class="form-control border-0" placeholder="数" inputmode="numeric"
                        style="min-width: 3.9rem; max-width: 3.9rem; text-align: right">
                    <select class="form-select border-0 text-white bg-secondary" aria-label="unit"
                        style="min-width: 4.1rem; max-width: 4.1rem;">
                        <option value="個" selected>個</option>
                        <option value="g">g</option>
                    </select>
                </div>
                <button type="button" class="btn"
                    style="--bs-btn-padding-x: .2rem; margin-left: 0.5rem; display: none;">
                    <i class="fs-2 bi bi-list text-secondary"></i>
                </button>
            </div>
            <div class="d-flex flex-row align-items-center">
                <button type="button" class="btn" style="--bs-btn-padding-x: .2rem; margin-right: 0.5rem;">
                    <i class="fs-2 bi bi-dash-circle-fill text-danger"></i>
                </button>
                <button type="button" class="btn" style="--bs-btn-padding-x: .2rem;">
                    <i class="fs-2 bi bi-square"></i>
                </button>
                <input type="text" class="form-control border-0" placeholder="食材" style="margin-right: 6px;">
                <div class="input-group" style="min-width: 8rem; max-width: 8rem;">
                    <input type="number" class="form-control border-0" placeholder="数" inputmode="numeric"
                        style="min-width: 3.9rem; max-width: 3.9rem; text-align: right">
                    <select class="form-select border-0 text-white bg-secondary" aria-label="unit"
                        style="min-width: 4.1rem; max-width: 4.1rem;">
                        <option value="個" selected>個</option>
                        <option value="g">g</option>
                    </select>
                </div>
                <button type="button" class="btn" style="--bs-btn-padding-x: .2rem; margin-left: 0.5rem;">
                    <i class="fs-2 bi bi-list text-secondary"></i>
                </button>
            </div>
        </div>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <button type="button" id="addItemButton" class="btn" style="--bs-btn-padding-x: .2rem;">
                        <i class="fs-2 bi bi-plus-circle"></i>
                    </button>
                </div>
                <div class="col text-end">
                    <button type="button" id="clearItemButton" class="btn" style="--bs-btn-padding-x: .2rem;">
                        <i class="fs-2 bi bi-trash3 text-danger"></i>
                    </button>
                    <button type="button" id="editItemButton" class="btn" data-bs-toggle="button" style="--bs-btn-padding-x: .2rem;">
                        <i class="fs-2 bi bi-pencil-square"></i>
                    </button>
                </div>
            </div>
        </div>
        -->
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function enable_toggle_support() {
            togglize($('[data-toggled="true"]'));
            (new MutationObserver(mutations => mutations
                .map(mutation => $(mutation.addedNodes).find('[data-toggled="true"]'))
                .forEach(node => togglize($(node)))))
                .observe(document.getElementsByTagName('body')[0], { childList: true, subtree: true });
        }

        function togglize($elements) {
            $elements.each(function () {
                (new MutationObserver(mutations => mutations
                    .map(mutation => $(mutation.target))
                    .forEach($target => {
                        $target.children($target.attr('data-toggle-state') == 'false' ? ':last' : ':first').hide();
                        $target.children($target.attr('data-toggle-state') == 'false' ? ':first' : ':last').show();
                    })))
                    .observe(this, { attributes: true, attributeFilter: ['data-toggle-state'] });

                handlers = $._data(this, 'events') ? $._data(this, 'events').click.map(handler => handler.handler) : [];
                handlers.forEach(handler => $(this).off('click', handler));
                $(this)
                    .attr({ 'data-toggle-state': $(this).attr('data-toggle-state') ?? 'false' })
                    .click(function () {
                        $(this).attr({ 'data-toggle-state': $(this).attr('data-toggle-state') == 'false' ? 'true' : 'false' })
                    });
                handlers.forEach(handler => $(this).on('click', handler));
            })
        }

        class ShoppingItem {
            constructor(shoppingList) {
                const self = this
                this.shoppingList = shoppingList;
                this.mode = 'view';
                this.$removeButton = $('<button>')
                    .addClass('fs-2 btn btn-icon me-2')
                    .append($('<i>').addClass('bi bi-dash-circle-fill text-danger'))
                    .hide()
                    .click(function () {
                        shoppingList.removeItem(self);
                    });
                this.$checkbox = $('<button>')
                    .addClass('fs-2 btn btn-icon me-1')
                    .attr({ 'data-toggled': true })
                    .append(
                        $('<i>').addClass('bi bi-square'),
                        $('<i>').addClass('bi bi-check-square-fill text-success'))
                this.$nameInput = $('<input>')
                    .addClass('form-control border-0 me-1')
                    .attr({ type: 'text', placeholder: '品名' })
                this.$amountInput = $('<input>')
                    .addClass('form-control border-0')
                    .attr({ type: 'number', placeholder: '量', inputmode: 'numeric' })
                    .css({ minWidth: '3.9rem', maxWidth: '3.9rem', textAlign: 'right' });
                this.$unitSelect = $('<select>')
                    .addClass('form-select border-0 text-white bg-secondary')
                    .css({ minWidth: '4.1rem', maxWidth: '4.1rem' })
                    .append(
                        $('<option>')
                            .attr({ value: '個', selected: true })
                            .text('個'),
                        $('<option>')
                            .attr({ value: 'g' })
                            .text('g'),
                    );
                this.$moveButton = $('<button>')
                    .addClass('fs-2 btn btn-icon ms-2')
                    .append($('<i>').addClass('bi-list text-secondary'))
                    .hide()
                this.$view = $('<div>')
                    .addClass('d-flex flex-row align-items-center')
                    .append(
                        this.$removeButton,
                        this.$checkbox,
                        this.$nameInput,
                        $('<div>')
                            .addClass('input-group')
                            .css({ minWidth: '8rem', maxWidth: '8rem' })
                            .append(this.$amountInput, this.$unitSelect),
                        this.$moveButton);
            }

            change_mode(mode) {
                switch (mode) {
                    case 'view':
                        this.$removeButton.hide();
                        this.$moveButton.hide();
                        this.$checkbox.removeAttr('disabled');
                        this.$nameInput.removeAttr('disabled');
                        this.$amountInput.removeAttr('disabled');
                        this.$unitSelect.removeAttr('disabled');
                        break;
                    case 'edit':
                        this.$removeButton.show();
                        this.$moveButton.show();
                        this.$checkbox.attr({ disabled: true });
                        this.$nameInput.attr({ disabled: true });
                        this.$amountInput.attr({ disabled: true });
                        this.$unitSelect.attr({ disabled: true });
                        break;
                }
            }

            removeSelf() {
                this.$view.remove();
            }
        }

        class ShoppingList {
            constructor() {
                const self = this;
                this.items = [];
                this.$addButton = $('<button>')
                    .addClass('btn btn-icon')
                    .append($('<i>').addClass('fs-2 bi bi-plus-circle'))
                    .click(function () {
                        self.addItem(new ShoppingItem(self));
                    });
                this.$editButton = $('<button>')
                    .addClass('btn btn-icon')
                    .attr({ 'data-toggled': true })
                    .append(
                        $('<i>').addClass('fs-2 bi bi-pencil-square'),
                        $('<i>').addClass('fs-2 bi bi-check-lg text-success'))
                    .click(function () {
                        self.change_mode($(this).attr('data-toggle-state') != 'false' ? 'edit' : 'view');
                    });
                this.$clearButton = $('<button>')
                    .addClass('btn btn-icon')
                    .attr({ disabled: true })
                    .append($('<i>').addClass('fs-2 bi-trash3 text-danger'))
                    .hide()
                    .click(function () {
                        const ret = window.confirm('リスト内の項目をすべて削除しますか？');
                        if (!ret) return;
                        self.removeAllItems();
                    });
                this.$view = $('<div>')
                    .addClass('container-fluid p-0')
                    .append(
                        $('<div>')
                            .addClass('container-fluid'),
                        $('<div>')
                            .addClass('container-fluid')
                            .append(
                                $('<div>')
                                    .addClass('row')
                                    .append(
                                        $('<div>')
                                            .addClass('col')
                                            .append(this.$addButton, this.$clearButton),
                                        $('<div>')
                                            .addClass('col text-end')
                                            .append(this.$editButton))));
            }

            addItem(shoppingItem) {
                this.items.push(shoppingItem);
                this.$view.children(':first-child').append(shoppingItem.$view);
                this.$clearButton.removeAttr('disabled');
            }

            removeItem(shoppingItem) {
                const index = this.items.indexOf(shoppingItem);
                if (index == -1) {
                    return;
                }
                this.items[index].removeSelf();
                this.items.splice(index, 1);
                if (this.items.length == 0) {
                    this.$clearButton.attr({ disabled: true });
                }
            }

            removeAllItems() {
                while (this.items.length > 0) {
                    this.removeItem(this.items[0]);
                }
                this.change_mode('view');
            }

            createItem() {
                return (new ShoppingItemView).$view;
            }

            change_mode(mode) {
                switch (mode) {
                    case 'view':
                        this.$editButton.attr({ 'data-toggle-state': false });
                        this.$addButton.show();
                        this.$clearButton.hide();
                        break;
                    case 'edit':
                        this.$editButton.attr({ 'data-toggle-state': true });
                        this.$addButton.hide();
                        this.$clearButton.show();
                        break;
                }
                this.items.forEach(item => item.change_mode(mode));
            }
        }

        $(function () {
            enable_toggle_support();
            $('[data-ui-name="body"]').append((new ShoppingList()).$view);
        })
    </script>
</body>

</html>