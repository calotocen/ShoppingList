<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>

<body>
    <div class="d-flex flex-column">
        <div id="container" class="d-flex">
        </div>
        <div class="d-flex gap-1">
            <button id="addButton1" type="button" class="btn btn-primary">add</button>
            <button id="addButton2" type="button" class="btn btn-primary">add with data-action attribute</button>
        </div>
    </div>
    <form></form>
    <i></i>
    <i></i>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        class AttributeMutationObserver {
            #observer;

            constructor(attribute, callback) {
                this.#observer = new MutationObserver(records => {
                    callback([
                        ...records
                            .flatMap(record => Array
                                .from(record.addedNodes)
                                .flatMap(node => $([...$(node).filter(`[${attribute}]`).get(), ...$(node).find(`[${attribute}]`).get()]).get())
                                .map(target => ({
                                    type: 'addedNode',
                                    target: target,
                                    value: $(target).attr(attribute) ?? null,
                                    oldValue: null,
                                    record: record,
                                }))),
                        ...records
                            .flatMap(record => Array
                                .from(record.removedNodes)
                                .flatMap(node => $([...$(node).filter(`[${attribute}]`).get(), ...$(node).find(`[${attribute}]`).get()]).get())
                                .map(target => ({
                                    type: 'removedNode',
                                    target: target,
                                    value: $(target).attr(attribute) ?? null,
                                    oldValue: null,
                                    record: record,
                                }))),
                        ...records
                            .filter(({ attributeName }) => attributeName === attribute)
                            .map(record => ({
                                type: 'changedAttribute',
                                target: record.target,
                                value: $(record.target).attr(attribute) ?? null,
                                oldValue: record.oldValue,
                                record: record,
                            }))
                    ]);
                });
            }

            static {
                Reflect.ownKeys(MutationObserver.prototype)
                    .filter(name => !['constructor', Symbol.toStringTag].includes(name))
                    .forEach(name => this.prototype[name] = function (...args) {
                        this.#observer[name](...args);
                    });
            }
        }

        $(function () {
            $('button').click(function () {
                $('#container')
                    .append($('<div>')
                        .addClass('input-group')
                        .attr({ 'data-action': this.id === 'addButton1' ? undefined : 'on' })
                        .append(
                            $('<span>')
                                .addClass('input-group-text')
                                .text(`data-action: ${this.id === 'addButton1' ? 'off' : 'on'}`),
                            $('<button>')
                                .attr({ type: 'button' })
                                .addClass('btn btn-outline-secondary')
                                .text('toggle')
                                .click(function () {
                                    const $parent = $(this).parent();
                                    $parent.is('[data-action]') ? $parent.removeAttr('data-action') : $parent.attr({ 'data-action': 'on' });
                                    $(this).prev().text(`data-action: ${$parent.is('[data-action]') ? 'on' : 'off'}`);
                                }),
                            $('<button>')
                                .attr({
                                    type: 'button',
                                    'data-action': 'button',
                                })
                                .addClass('btn btn-danger')
                                .text('delete')
                                .click(function () {
                                    ($(this).parent()).remove();
                                })))
                    .append($('<div>')
                        .addClass('input-group')
                        .attr({ 'data-action': this.id === 'addButton1' ? undefined : 'on' })
                        .append(
                            $('<span>')
                                .addClass('input-group-text')
                                .text(`data-action: ${this.id === 'addButton1' ? 'off' : 'on'}`),
                            $('<button>')
                                .attr({ type: 'button' })
                                .addClass('btn btn-outline-secondary')
                                .text('toggle')
                                .click(function () {
                                    const $parent = $(this).parent();
                                    $parent.is('[data-action]') ? $parent.removeAttr('data-action') : $parent.attr({ 'data-action': 'on' });
                                    $(this).prev().text(`data-action: ${$parent.is('[data-action]') ? 'on' : 'off'}`);
                                }),
                            $('<button>')
                                .attr({ type: 'button' })
                                .addClass('btn btn-danger')
                                .text('delete')
                                .click(function () {
                                    ($(this).parent()).remove();
                                })))
            });

            const observer = new AttributeMutationObserver('data-action', records => {
                console.log(records);
            });
            observer.observe($('body')[0], {
                subtree: true,
                childList: true,
                attributes: true,
                attributeOldValue: true,
            });
        });
    </script>
</body>

</html>