<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        dialog {
            max-width: initial;
            max-height: initial;
            padding: 0;
            border: none;
            outline: none;
        }

        .outline-none {
            outline: none;
        }

        .dvw-75 {
            width: 75dvw;
        }

        .dvh-100 {
            height: 100dvh;
        }

        .text-main {
            color: #36b389;
        }
    </style>
</head>

<body class="dvh-100">
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        class Item {
            constructor(properties = {}) {
                Object
                    .entries({ name: '', amount: 0, unit: '', displayed: false, selected: false })
                    .forEach(([key, value]) => this[key] = properties[key] ?? value);
            }
        }
        class ItemSet {
            constructor(properties = {}) {
                Object
                    .entries({ name: '', items: [] })
                    .forEach(([key, value]) => this[key] = properties[key] ?? value);
            }
        }
        class Items extends Array {
            get displays() {
                return this.filter(item => item.displayed);
            }
            get selections() {
                return this.filter(item => item.selected);
            }
        }

        class Model {
            constructor() {
                this.itemSets = [];
                this.draftItemSet = undefined;
                this.independentItems = [];
                this.draftIndependentItem = undefined;
            }

            get items() {
                return new Items(...this.itemSets.flatMap(itemSet => itemSet.items), ...this.independentItems);
            }

            commitDraftItemSet() {
                this.itemSets.push(draftItemSet);
                this.draftItemSet = undefined;
            }
            discardDraftItemSet() {
                this.draftItemSet = undefined;
            }
            
            commitDraftIndependentItem() {
                this.independentItems.push(draftIndependentItem);
                this.draftIndependentItem = undefined;
            }
            discardDraftIndependentItem() {
                this.draftIndependentItem = undefined;
            }

            save() {
                localStorage['model'] = JSON.stringify(this);
                return this;
            }
            load() {
                Object.assign(this, JSON.parse(localStorage['model']));
                return this;
            }
        }
    </script>
</body>

</html>